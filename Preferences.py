"""BIU DS17 - Python Project 1 - Weather Forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dZGTjDvS3OyltVyd89ekrZQg5uNrzOYS
"""

import Weather
import Json_Handle
import Time
import os

def setDefaultCityPreference(city):
    if (not Json_Handle.is_file_exists('preferences.json')):
        preferences = dict()
        preferences['Default Unit'] = 'C'
        preferences['Default City'] = city
        preferences = Json_Handle.dumpToFile(preferences, 'preferences.json')
def setDefaultCity():
    print("Please choose a default city.")
    default = input("Default city:")
    locationZone = Weather.get_weather(default)
    Time.get_local_time()
    Time.generateTimeZoneDic(default)
    Time.timeInzone(locationZone)
    setDefaultDic(default)
    setDefaultCityPreference(default)
    return default

def setDefaultDic(defaultCity):
    defaultDic = []
    defaultDic.insert(0,defaultCity)
    Json_Handle.dumpToFile(defaultDic, 'defaultCity.json')

def changeDefaultUnit():
    print("Please select the default temperature unit you wish to set:")
    print("1. Celsius \n2.Farenheight")
    choice = int(input("Chosen number:"))
    try:
        preferences = Json_Handle.loadFromJson('preferences.json', 'r')
        match choice:

            case 1:
                preferences['Default Unit'] = 'C'
                Json_Handle.writeToJson(preferences, 'preferences.json')
                print("Your default temperature unit is Celsius")
            case 2:
                preferences['Default Unit'] = 'F'
                Json_Handle.writeToJson(preferences, 'preferences.json')
                print("Your default temperature unit is Fahrenheit")
            case _:
                print("You have chosen the wrong number.")
    except:
        print("Could not overwrite the file preferences.json, please check if the file is open.")

def changeDefaultCity():
    try:
        print("Please enter a new default city.")
        city = input("City name: ")
        defaultCity = []
        defaultCity.insert(0, city)
        Json_Handle.writeToJson(defaultCity, 'defaultCity.json')
        preferences = Json_Handle.loadFromJson('preferences.json', 'r')
        Json_Handle.writeToJson(defaultCity,"defaultCity.json")
        preferences['Default City'] = city
        Json_Handle.writeToJson(preferences, 'preferences.json')
        print(f"The default city has been changed successfuly to {city}")
    except:
        print("The operation failed. please check that the JSON file named defaultCity.json is not open")



def addToFav():
    print("Please enter a favorite city:")
    favCity = input("Favorite city chosen: ")
    favCity = Weather.convertCity(favCity)
    if(not Json_Handle.is_file_exists('favorites.json')):
        favCityDic = {}
        favCityDic['Favorite0'] = favCity
        Json_Handle.dumpToFile(favCityDic, 'favorites.json')
    else:
        favCityDic = Json_Handle.loadFromJson('favorites.json', 'r')
        i = len(favCityDic)
        favCityDic[f'Favorite{i}'] = favCity
        Json_Handle.writeToJson(favCityDic, 'favorites.json')

def removeFromFav():
    print("Please enter a city to remove:")
    rmCity = input("Favorite city chosen: ")
    rmCity = Weather.convertCity(rmCity)
    if (not Json_Handle.is_file_exists('favorites.json')):
        print("You have not added any favorite cities, please add one first.")
    else:
        favCityDic = Json_Handle.loadFromJson('favorites.json', 'r')
        if(is_value_in_dict(favCityDic, rmCity)):
            favCityDic = delete_value_from_dict(favCityDic,rmCity)
            Json_Handle.writeToJson(favCityDic, 'favorites.json')
            print(f"The city {rmCity} has been successfuly removed from favorites.json favorite cities file.")
        else:
            "No such favorite city has been found in favorites.json file."

def displayFavorites():
    favCities = Json_Handle.loadFromJson('favorites.json', 'r')
    print(favCities)

def isKeyInDic(dictionary, key):
    if key in dictionary:
        return True

def is_value_in_dict(dictionary, value):
    return value in dictionary.values()

def delete_value_from_dict(dictionary, value):
    for key, val in list(dictionary.items()):
        if val == value:
            del dictionary[key]
    return dictionary
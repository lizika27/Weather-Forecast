# -*- coding: utf-8 -*-
"""BIU DS17 - Python Project 1 - Weather Forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dZGTjDvS3OyltVyd89ekrZQg5uNrzOYS
"""

import requests
import pycountry_convert
from geopy.geocoders import Nominatim
import Time
import Json_Handle

api_key_weather = '71c01076b085faa886b0c890460dc605'
base_url = "http://api.openweathermap.org/data/2.5/weather"
paramsInMetric = {
        'q': '',
        'appid': api_key_weather,

        'units': 'metric'
    }

paramsInImperial = {
        'q': '',
        'appid': api_key_weather,

        'units': 'imperial'
    }
def get_weather(city):
    metric = 'C'
    imperial = 'F'
    if(not Json_Handle.is_file_exists('preferences.json')):
        paramsInMetric.update({'q': city, 'appid': api_key_weather})

        response = requests.get(base_url, params=paramsInMetric)

        if response.status_code == 200:
             convertedCity = display_weather(response.json(), metric)
             return convertedCity
    preferences = Json_Handle.loadFromJson('preferences.json', 'r')
    first_key = next(iter(preferences))
    first_value = preferences[first_key]
    if(Json_Handle.is_file_exists('preferences.json')):

        if(first_value == imperial):
            paramsInImperial.update({'q': city, 'appid': api_key_weather})

            response = requests.get(base_url, params=paramsInImperial)

            if response.status_code == 200:
                convertedCity = display_weather(response.json(), imperial)
                return convertedCity
        if (first_value == metric):
            paramsInMetric.update({'q': city, 'appid': api_key_weather})

            response = requests.get(base_url, params=paramsInMetric)

            if response.status_code == 200:
                convertedCity = display_weather(response.json(), metric)
                return convertedCity
    else:
        return None


def display_weather(weather_data, unit):
    if weather_data:
        city = weather_data['name']
        country = weather_data['sys']['country']
        timezone = weather_data['timezone']
        temp = weather_data['main']['temp']
        weather_desc = weather_data['weather'][0]['description']
        humidity = weather_data['main']['humidity']

        print(f"Weather in {city}, {country}:")
        if(unit == 'C'):
            print(f"Temperature: {temp}°C")
        if(unit == 'F'):
            print(f"Temperature: {temp}°F")
        print(f"Weather: {weather_desc}")
        print(f"Humidity: {humidity}%")

    else:
        print("Weather data could not be retrieved. Please check the city name and API key.")
    convertedCity = convertCity(city)
    return convertedCity

def convertCity(city):
    cityDic = city.split()
    convertedCity = '_'.join(cityDic)
    if(convertedCity and convertedCity[0].islower()):
        convertedCity[0].isupper()
    return convertedCity

def country_code_to_continent_name(country_code):
    countryName = pycountry_convert.country_alpha2_to_country_name(country_code)
    continent_code = pycountry_convert.country_alpha2_to_continent_code(country_code)
    continent_name = pycountry_convert.convert_continent_code_to_continent_name(continent_code)
    return continent_name

def is_in_north_america(city_code):
    geolocator = Nominatim(user_agent="city_locator")
    location = geolocator.geocode(city_code)
    if (24.396308 <= location.latitude <= 84.555535 and -168.110474 <= location.longitude <= -47.725760):
        # Check if the coordinates is within the range of North America
        return True
    return False


def is_in_australia(city):
    geolocator = Nominatim(user_agent="city_locator")
    location = geolocator.geocode(city)

    if location:
        country = location.raw['display_name'].split(",")[-1].strip()
        return country == 'Australia'
    else:
        return False

